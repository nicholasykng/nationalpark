{"ast":null,"code":"var _jsxFileName = \"/Users/nicholasykng/nationalpark/client/src/components/parksearch.js\";\nimport React, { Component } from 'react';\nimport { FormControl, FormGroup, FormLabel } from 'react-bootstrap';\nimport ParkCard from \"../containers/ParkCard\";\nimport { connect } from 'react-redux';\nimport { fetchParks } from '../actions/fetchParks.js';\n\nclass ParkSearch extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      filtered: []\n    };\n\n    this.renderParks = () => {\n      if (this.state.filtered === []) {\n        this.props.parks.map(park => /*#__PURE__*/React.createElement(ParkCard, {\n          key: park.id,\n          park: park,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 42\n          }\n        }));\n      } else {\n        return this.state.filtered.map(park => /*#__PURE__*/React.createElement(ParkCard, {\n          key: park.id,\n          park: park,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 52\n          }\n        }));\n      }\n    };\n\n    this.handleOnChange = event => {\n      let currentPark = [];\n      let newParkList = [];\n\n      if (event.target.value !== \"\") {\n        currentPark = this.props.parks;\n        newParkList = currentPark.filter(park => {\n          const lowercaseparkname = park.name.toLowerCase();\n          let filterpark = event.target.value.toLowerCase();\n          return lowercaseparkname.includes(filterpark);\n        });\n      } else {\n        newParkList = this.props.parks;\n      }\n\n      this.setState({\n        filtered: newParkList\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchParks();\n    this.setState({\n      filtered: this.props.parks\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }\n    }, \"Search For A National Park:\"), /*#__PURE__*/React.createElement(FormControl, {\n      type: \"text\",\n      name: \"searchterm\",\n      onChange: this.handleOnChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }\n    })), this.renderParks());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    parks: state.parks\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchParks: () => dispatch(fetchParks())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ParkSearch);","map":{"version":3,"sources":["/Users/nicholasykng/nationalpark/client/src/components/parksearch.js"],"names":["React","Component","FormControl","FormGroup","FormLabel","ParkCard","connect","fetchParks","ParkSearch","state","filtered","renderParks","props","parks","map","park","id","handleOnChange","event","currentPark","newParkList","target","value","filter","lowercaseparkname","name","toLowerCase","filterpark","includes","setState","componentDidMount","render","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,WAAR,EAAqBC,SAArB,EAAgCC,SAAhC,QAAgD,iBAAhD;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,UAAR,QAAyB,0BAAzB;;AAEA,MAAMC,UAAN,SAAyBP,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAC/BQ,KAD+B,GACvB;AACJC,MAAAA,QAAQ,EAAE;AADN,KADuB;;AAAA,SAU/BC,WAV+B,GAUjB,MAAM;AAChB,UAAI,KAAKF,KAAL,CAAWC,QAAX,KAAwB,EAA5B,EAAgC;AAC5B,aAAKE,KAAL,CAAWC,KAAX,CAAiBC,GAAjB,CAAqBC,IAAI,iBAAI,oBAAC,QAAD;AAAU,UAAA,GAAG,EAAEA,IAAI,CAACC,EAApB;AAAwB,UAAA,IAAI,EAAED,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA7B;AACC,OAFL,MAGM;AACF,eAAO,KAAKN,KAAL,CAAWC,QAAX,CAAoBI,GAApB,CAAwBC,IAAI,iBAAI,oBAAC,QAAD;AAAU,UAAA,GAAG,EAAEA,IAAI,CAACC,EAApB;AAAwB,UAAA,IAAI,EAAED,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAhC,CAAP;AACH;AAEJ,KAlB8B;;AAAA,SAmB/BE,cAnB+B,GAmBdC,KAAK,IAAI;AACtB,UAAIC,WAAW,GAAG,EAAlB;AACA,UAAIC,WAAW,GAAG,EAAlB;;AACA,UAAIF,KAAK,CAACG,MAAN,CAAaC,KAAb,KAAuB,EAA3B,EAA+B;AAC3BH,QAAAA,WAAW,GAAG,KAAKP,KAAL,CAAWC,KAAzB;AACAO,QAAAA,WAAW,GAAGD,WAAW,CAACI,MAAZ,CAAmBR,IAAI,IAAI;AACrC,gBAAMS,iBAAiB,GAAGT,IAAI,CAACU,IAAL,CAAUC,WAAV,EAA1B;AACA,cAAIC,UAAU,GAAGT,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmBI,WAAnB,EAAjB;AACA,iBAAOF,iBAAiB,CAACI,QAAlB,CAA2BD,UAA3B,CAAP;AACH,SAJa,CAAd;AAKH,OAPD,MAOO;AACHP,QAAAA,WAAW,GAAG,KAAKR,KAAL,CAAWC,KAAzB;AACH;;AACD,WAAKgB,QAAL,CAAc;AACVnB,QAAAA,QAAQ,EAAEU;AADA,OAAd;AAGH,KAnC8B;AAAA;;AAI/BU,EAAAA,iBAAiB,GAAG;AAChB,SAAKlB,KAAL,CAAWL,UAAX;AACA,SAAKsB,QAAL,CAAc;AACVnB,MAAAA,QAAQ,EAAE,KAAKE,KAAL,CAAWC;AADX,KAAd;AAGH;;AA2BDkB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,eAEI,oBAAC,WAAD;AAAa,MAAA,IAAI,EAAC,MAAlB;AAAyB,MAAA,IAAI,EAAC,YAA9B;AAA2C,MAAA,QAAQ,EAAE,KAAKd,cAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,EAKK,KAAKN,WAAL,EALL,CADJ;AASH;;AA9C8B;;AAgDnC,MAAMqB,eAAe,GAAGvB,KAAK,IAAI;AAC7B,SAAO;AACHI,IAAAA,KAAK,EAAEJ,KAAK,CAACI;AADV,GAAP;AAGH,CAJD;;AAKA,MAAMoB,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACH3B,IAAAA,UAAU,EAAE,MAAM2B,QAAQ,CAAC3B,UAAU,EAAX;AADvB,GAAP;AAGH,CAJD;;AAKA,eAAeD,OAAO,CAAC0B,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CzB,UAA7C,CAAf","sourcesContent":["import React, {Component} from 'react'\nimport {FormControl, FormGroup, FormLabel} from 'react-bootstrap'\nimport ParkCard from \"../containers/ParkCard\"\nimport {connect} from 'react-redux'\nimport {fetchParks} from '../actions/fetchParks.js'\n\nclass ParkSearch extends Component {\n    state = {\n        filtered: []\n    }\n    componentDidMount() {\n        this.props.fetchParks()\n        this.setState({\n            filtered: this.props.parks\n        })\n    }\n    renderParks = () => {\n        if (this.state.filtered === []) {\n            this.props.parks.map(park => <ParkCard key={park.id} park={park} />)\n            }\n        else  {\n            return this.state.filtered.map(park => <ParkCard key={park.id} park={park} />) \n        }\n\n    } \n    handleOnChange = event => {\n        let currentPark = []\n        let newParkList = []\n        if (event.target.value !== \"\") {\n            currentPark = this.props.parks\n            newParkList = currentPark.filter(park => {\n                const lowercaseparkname = park.name.toLowerCase()\n                let filterpark = event.target.value.toLowerCase()\n                return lowercaseparkname.includes(filterpark)\n            })\n        } else {\n            newParkList = this.props.parks\n        }\n        this.setState({\n            filtered: newParkList\n        })\n    }\n    render() {\n        return (\n            <div>\n                <FormGroup>\n                    <FormLabel>Search For A National Park:</FormLabel>\n                    <FormControl type=\"text\" name=\"searchterm\" onChange={this.handleOnChange} />\n                </FormGroup>\n                {this.renderParks()}\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        parks: state.parks\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchParks: () => dispatch(fetchParks())\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ParkSearch)"]},"metadata":{},"sourceType":"module"}