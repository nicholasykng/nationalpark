{"ast":null,"code":"var _jsxFileName = \"/Users/nicholasykng/nationalpark/client/src/components/ParksList.js\";\nimport React from 'react';\nimport ParkCard from \"../containers/ParkCard\";\nimport { Button } from 'react-bootstrap';\n\nclass ParksList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      sorted: true,\n      filtered: []\n    };\n\n    this.renderParks = () => {\n      const defaultSort = this.state.sorted;\n      this.props.parks.sort(function (a, b) {\n        if (defaultSort) {\n          return b.likes - a.likes;\n        } else {\n          return a.likes - b.likes;\n        }\n      });\n      return this.props.parks.map(park => /*#__PURE__*/React.createElement(ParkCard, {\n        key: park.id,\n        park: park,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 45\n        }\n      }));\n    };\n\n    this.handleSort = () => {\n      this.setState({\n        sorted: !this.state.sorted\n      });\n    };\n\n    this.handleOnChange = event => {\n      let currentList = [];\n      let newList = [];\n\n      if (event.target.value !== \"\") {\n        currentList = this.props.parks;\n        newList = currentList.filter(park => {\n          const lowercase = park.name.toLowerCase();\n          const filter = event.target.value.toLowerCase();\n          return lowercase.includes(filter);\n        });\n      } else {\n        newList = this.props.parks;\n      }\n\n      this.setState({\n        filtered: newList\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      filtered: this.props.parks\n    });\n  }\n\n  shouldComponentUpdate(nextProps) {\n    this.setState({\n      filtered: nextProps.parks\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, \"List of Top National Parks From \", this.state.sorted ? \"Most To Least Likes\" : \"Least To Most Likes\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-dark\",\n      className: \"sort-like\",\n      onClick: this.handleSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }, this.state.sorted ? \"Sort Least to Most Likes\" : \"Sort Most to Least Likes\"), this.renderParks(), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"searchterm\",\n      onChange: this.handleOnChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default ParksList;","map":{"version":3,"sources":["/Users/nicholasykng/nationalpark/client/src/components/ParksList.js"],"names":["React","ParkCard","Button","ParksList","Component","state","sorted","filtered","renderParks","defaultSort","props","parks","sort","a","b","likes","map","park","id","handleSort","setState","handleOnChange","event","currentList","newList","target","value","filter","lowercase","name","toLowerCase","includes","componentDidMount","shouldComponentUpdate","nextProps","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ParkCard from \"../containers/ParkCard\"\nimport {Button} from 'react-bootstrap'\n\nclass ParksList extends React.Component {\n    state = {\n        sorted: true,\n        filtered: []\n    }\n    componentDidMount() {\n        this.setState({\n            filtered: this.props.parks\n        })\n    }\n    shouldComponentUpdate(nextProps) {\n        this.setState({\n            filtered: nextProps.parks\n        })\n    }\n   \n    renderParks = () => {\n        const defaultSort = this.state.sorted\n        this.props.parks.sort(function(a,b) {\n            if (defaultSort) {\n                return b.likes - a.likes\n            } else {\n                return a.likes - b.likes\n            }\n        })\n        return this.props.parks.map(park => <ParkCard key={park.id} park={park} />)\n    } \n    \n    handleSort = () => {\n        this.setState({\n            sorted: !this.state.sorted\n        })\n    }\n    handleOnChange = event => {\n        let currentList = []\n        let newList = []\n        if (event.target.value !== \"\") {\n            currentList = this.props.parks\n            newList = currentList.filter(park => {\n                const lowercase = park.name.toLowerCase()\n                const filter = event.target.value.toLowerCase()\n                return lowercase.includes(filter)\n            })\n        } else {\n            newList = this.props.parks\n        }\n        this.setState({\n            filtered: newList\n        })\n    }\n   \n     \n    render() {\n        return (\n            <div>\n                <h1>List of Top National Parks From {this.state.sorted ? \"Most To Least Likes\" : \"Least To Most Likes\"}</h1>\n                <Button variant=\"outline-dark\" className=\"sort-like\" onClick={this.handleSort}>{this.state.sorted ? \"Sort Least to Most Likes\" : \"Sort Most to Least Likes\"}</Button>\n                {this.renderParks()}\n                <form>\n                    <input type=\"text\" name=\"searchterm\" onChange={this.handleOnChange} />\n                </form>\n            </div>\n        )\n    }\n}\nexport default ParksList"]},"metadata":{},"sourceType":"module"}