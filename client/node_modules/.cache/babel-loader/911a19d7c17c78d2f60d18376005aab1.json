{"ast":null,"code":"var _jsxFileName = \"/Users/nicholasykng/nationalpark/client/src/components/parksearch.js\";\nimport React, { Component } from 'react';\nimport { FormControl, FormGroup, FormLabel } from 'react-bootstrap';\nimport ParkCard from \"../containers/ParkCard\";\nimport { connect } from 'react-redux';\nimport { fetchParks } from '../actions/fetchParks.js';\n\nclass ParkSearch extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      filtered: []\n    };\n\n    this.renderParks = () => {\n      if (this.state.filtered.length === 0) {\n        return this.props.parks.map(park => /*#__PURE__*/React.createElement(ParkCard, {\n          key: park.id,\n          park: park,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 49\n          }\n        }));\n      } else {\n        return this.state.filtered.map(park => /*#__PURE__*/React.createElement(ParkCard, {\n          key: park.id,\n          park: park,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 52\n          }\n        }));\n      }\n    };\n\n    this.handleOnChange = event => {\n      const newParkList = this.props.parks.filter(park => {\n        const lowercaseparkname = park.name.toLowerCase();\n        let filterpark = event.target.value.toLowerCase();\n        return lowercaseparkname.includes(filterpark);\n      });\n      this.setState({\n        filtered: newParkList\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchParks();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }\n    }, \"Search For A National Park:\"), /*#__PURE__*/React.createElement(FormControl, {\n      type: \"text\",\n      name: \"searchterm\",\n      onChange: this.handleOnChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }\n    })), this.renderParks());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    parks: state.parks\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchParks: () => dispatch(fetchParks())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ParkSearch);","map":{"version":3,"sources":["/Users/nicholasykng/nationalpark/client/src/components/parksearch.js"],"names":["React","Component","FormControl","FormGroup","FormLabel","ParkCard","connect","fetchParks","ParkSearch","state","filtered","renderParks","length","props","parks","map","park","id","handleOnChange","event","newParkList","filter","lowercaseparkname","name","toLowerCase","filterpark","target","value","includes","setState","componentDidMount","render","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,WAAR,EAAqBC,SAArB,EAAgCC,SAAhC,QAAgD,iBAAhD;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,UAAR,QAAyB,0BAAzB;;AAEA,MAAMC,UAAN,SAAyBP,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAC/BQ,KAD+B,GACvB;AACJC,MAAAA,QAAQ,EAAE;AADN,KADuB;;AAAA,SAO/BC,WAP+B,GAOjB,MAAM;AAChB,UAAI,KAAKF,KAAL,CAAWC,QAAX,CAAoBE,MAApB,KAA+B,CAAnC,EAAsC;AAClC,eAAO,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,GAAjB,CAAqBC,IAAI,iBAAI,oBAAC,QAAD;AAAU,UAAA,GAAG,EAAEA,IAAI,CAACC,EAApB;AAAwB,UAAA,IAAI,EAAED,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA7B,CAAP;AACC,OAFL,MAGM;AACF,eAAO,KAAKP,KAAL,CAAWC,QAAX,CAAoBK,GAApB,CAAwBC,IAAI,iBAAI,oBAAC,QAAD;AAAU,UAAA,GAAG,EAAEA,IAAI,CAACC,EAApB;AAAwB,UAAA,IAAI,EAAED,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAhC,CAAP;AACH;AAEJ,KAf8B;;AAAA,SAgB/BE,cAhB+B,GAgBdC,KAAK,IAAI;AAClB,YAAMC,WAAW,GAAG,KAAKP,KAAL,CAAWC,KAAX,CAAiBO,MAAjB,CAAwBL,IAAI,IAAI;AAChD,cAAMM,iBAAiB,GAAGN,IAAI,CAACO,IAAL,CAAUC,WAAV,EAA1B;AACA,YAAIC,UAAU,GAAGN,KAAK,CAACO,MAAN,CAAaC,KAAb,CAAmBH,WAAnB,EAAjB;AACA,eAAOF,iBAAiB,CAACM,QAAlB,CAA2BH,UAA3B,CAAP;AACH,OAJmB,CAApB;AAMJ,WAAKI,QAAL,CAAc;AACVnB,QAAAA,QAAQ,EAAEU;AADA,OAAd;AAGH,KA1B8B;AAAA;;AAI/BU,EAAAA,iBAAiB,GAAG;AAChB,SAAKjB,KAAL,CAAWN,UAAX;AACH;;AAqBDwB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,eAEI,oBAAC,WAAD;AAAa,MAAA,IAAI,EAAC,MAAlB;AAAyB,MAAA,IAAI,EAAC,YAA9B;AAA2C,MAAA,QAAQ,EAAE,KAAKb,cAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,EAKK,KAAKP,WAAL,EALL,CADJ;AASH;;AArC8B;;AAuCnC,MAAMqB,eAAe,GAAGvB,KAAK,IAAI;AAC7B,SAAO;AACHK,IAAAA,KAAK,EAAEL,KAAK,CAACK;AADV,GAAP;AAGH,CAJD;;AAKA,MAAMmB,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACH3B,IAAAA,UAAU,EAAE,MAAM2B,QAAQ,CAAC3B,UAAU,EAAX;AADvB,GAAP;AAGH,CAJD;;AAKA,eAAeD,OAAO,CAAC0B,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CzB,UAA7C,CAAf","sourcesContent":["import React, {Component} from 'react'\nimport {FormControl, FormGroup, FormLabel} from 'react-bootstrap'\nimport ParkCard from \"../containers/ParkCard\"\nimport {connect} from 'react-redux'\nimport {fetchParks} from '../actions/fetchParks.js'\n\nclass ParkSearch extends Component {\n    state = {\n        filtered: []\n    }\n    componentDidMount() {\n        this.props.fetchParks()\n    }\n    renderParks = () => {\n        if (this.state.filtered.length === 0) {\n            return this.props.parks.map(park => <ParkCard key={park.id} park={park} />)\n            }\n        else  {\n            return this.state.filtered.map(park => <ParkCard key={park.id} park={park} />) \n        }\n\n    } \n    handleOnChange = event => {\n            const newParkList = this.props.parks.filter(park => {\n                const lowercaseparkname = park.name.toLowerCase()\n                let filterpark = event.target.value.toLowerCase()\n                return lowercaseparkname.includes(filterpark)\n            })\n       \n        this.setState({\n            filtered: newParkList\n        })\n    }\n    render() {\n        return (\n            <div>\n                <FormGroup>\n                    <FormLabel>Search For A National Park:</FormLabel>\n                    <FormControl type=\"text\" name=\"searchterm\" onChange={this.handleOnChange} />\n                </FormGroup>\n                {this.renderParks()}\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        parks: state.parks\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchParks: () => dispatch(fetchParks())\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ParkSearch)"]},"metadata":{},"sourceType":"module"}